apply plugin: "application"
apply plugin: "spring-boot"

mainClassName = "org.apache.mesos.elasticsearch.scheduler.Main"
ext {
    imageName = imagePrefix + "/elasticsearch-scheduler:latest"
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "de.undercouch:gradle-download-task:${gradleDownloadTaskVersion}"
    }
}
repositories {
    maven {
        url "https://jitpack.io"
    }
}
configurations {
    all*.exclude group:"org.springframework.boot", module: "spring-boot-starter-logging"
}
dependencies {

    compile project(":commons")

    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }
    compile("org.springframework.boot:spring-boot-starter-log4j:${springBootVersion}")
    compile "commons-io:commons-io:${commonsIOVersion}"
    compile "org.apache.commons:commons-collections4:${commonsCollectionsVersion}"
    compile "org.apache.commons:commons-lang3:${commonsLangVersion}"
    compile "log4j:log4j:${log4jVersion}"
    compile "org.apache.httpcomponents:httpclient:${httpClientVersion}"
    compile "com.beust:jcommander:${jcommanderVersion}"
    compile "com.jayway.awaitility:awaitility:${awaitilityVersion}"
    compile "com.mashape.unirest:unirest-java:${unirestVersion}"

    compile "org.webjars:angularjs:${webAngularVersion}"
    compile "org.webjars.bower:angular-route:${webAngularVersion}"
    compile "org.webjars.bower:angular-resource:${webAngularVersion}"
    compile "org.webjars.bower:angular-bootstrap:${webAngularBootstrapVersion}"
    compile "org.webjars:bootstrap:${webBootstrapVersion}"
    compile "org.webjars:font-awesome:${webFontAwesomeVersion}"
    compile "org.webjars.bower:rdash-ui:${webRdashUiVersion}"
    compile "org.webjars:momentjs:${webMomentJsVersion}"
    compile "org.webjars:angular-moment:${webAngularMomentVersion}"
    compile "org.webjars.bower:json-formatter:${webJsonFormatterVersion}"
    compile "org.webjars.bower:hightcharts:${webHighChartsVersion}"
    compile "org.webjars.bower:highcharts-ng:${webHighChartsNgVersion}"


    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile "org.hamcrest:hamcrest-core:${hamcrestVersion}"
    testCompile "joda-time:joda-time:${jodaTimeVersion}"
    testCompile "com.mashape.unirest:unirest-java:${unirestVersion}"

}

jar {
    dependsOn "getElasticsearchTarball", "packageDependencies"
    baseName = "scheduler"
    from files("build/internalClasses")
    manifest {
        attributes(
                "Main-Class": mainClassName,
                "Implementation-Version": project.version
        )
    }
}

task packageDependencies {
    dependsOn "classes"
    inputs.files configurations.compile
    outputs.dir "build/internalClasses"
    doLast {
        copy {
            from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } // Include dependencies
            into "build/internalClasses"
        }
    }
}

test {
    testLogging {
        showStandardStreams = true
    }
}

task taskCopyFilesForDocker(type: Copy) {
    dependsOn "copyShellScript", "copyJar"
}

task copyJar(type: Copy) {
    from bootRepackage
    into "build/docker"
    rename { String fileName ->
        "mesos-elasticsearch-" + fileName.replace("-${project.version}-withDependencies", "")
    }
}

task renameJarForRelease(type: Copy) {
    from bootRepackage
    into "build/release"
    rename { String fileName ->
        "mesos-elasticsearch-" + fileName.replace("-withDependencies", "")
    }
}

task copyShellScript(type: Copy) {
    from        "start-scheduler.sh"
    into "build/docker"
}

import de.undercouch.gradle.tasks.download.Download
task getElasticsearchTarball(type: Download) {
    src "https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/" + "$elasticsearchVersion" + "/elasticsearch-"  + "$elasticsearchVersion" + ".tar.gz"
    dest new File(buildDir, "./resources/main/public/elasticsearch.tar.gz")
    onlyIfNewer true
}

distTar.enabled = false
distZip.enabled = false

bootRepackage {
    classifier = "withDependencies"
    finalizedBy renameJarForRelease
}
